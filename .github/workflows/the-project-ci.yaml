name: CI for the-project

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
    tags:
      - "*"

env:
  IMAGE_NAME: the_project
  IMAGE_TAG: ${{ github.sha }}
  PROJECT_ID: k8s-course-466712
  IMAGE_REPO: europe-central2-docker.pkg.dev/k8s-course-466712/course-repo/the_project

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to GCloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      - name: Docker auth
        run: |
          gcloud auth configure-docker europe-central2-docker.pkg.dev

      - name: Build and push image
        run: |
          docker build -t $IMAGE_NAME:$IMAGE_TAG ./the_project
          docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_REPO:$IMAGE_TAG
          docker push $IMAGE_REPO:$IMAGE_TAG

      - name: Install Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin

      - name: Update Kustomization for Environment
        run: |
          echo "GITHUB_REF=${GITHUB_REF}"

          ENV_DIR=""
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            ENV_DIR="staging"
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            ENV_DIR="production"
          else
            echo "Not a recognized deployment trigger (main or tag)"
            exit 0
          fi

          cd the_project/manifests/overlays/$ENV_DIR
          kustomize edit set image the_project=${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}

      - name: Commit and push updated tag
        run: |
          git config user.name "github-actions"
          git config user.email "ci@github.com"
          git add the_project/manifests/overlays/*
          git commit -m "Update image tag to $IMAGE_TAG"
          git push

      - name: Delete old images
        run: |
          IMAGE_URI="${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}"

          CURRENT_DIGEST=$(gcloud artifacts docker images describe $IMAGE_URI \
            --project=${{ env.PROJECT_ID }} \
            --format="value(image_summary.digest)")
          echo "Current image digest: $CURRENT_DIGEST"

          ALL_DIGESTS=$(gcloud artifacts docker images list ${{ env.IMAGE_REPO }} \
            --project=${{ env.PROJECT_ID }} \
            --format="value(digest)")

          for DIGEST in $ALL_DIGESTS; do
            if [[ "$DIGEST" != "$CURRENT_DIGEST" ]]; then
              echo "Deleting digest: $DIGEST"
              gcloud artifacts docker images delete "${{ env.IMAGE_REPO }}@${DIGEST}" \
                --quiet --project=${{ env.PROJECT_ID }} --delete-tags
            else
              echo "Skipping current digest: $DIGEST"
            fi
          done
